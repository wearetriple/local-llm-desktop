trigger: none

pr: none

resources:
  repositories:
    - repository: self
      trigger:
        tags:
          include:
            - v*

variables:
  - name: windowsVmImage
    value: 'windows-latest'
  - name: macVmImage
    value: 'macOS-latest'
  - name: tagVersion
    value: $[replace(variables['Build.SourceBranchName'], 'v', '')]

stages:
  - stage: Build
    displayName: 'Build and Publish'
    jobs:
      - job: BuildWindows
        displayName: 'Build for Windows'
        pool:
          vmImage: $(windowsVmImage)
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'
            displayName: 'Install Node.js'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: ./node_modules
            displayName: Cache npm packages

          - script: |
              npm ci
            displayName: 'Install Dependencies'

          # Update version in package.json
          - script: |
              # Extract version from tag (without 'v')
              echo "Updating version to $(tagVersion)"

              # Use node to update package.json version
              node -e "
                const fs = require('fs');
                const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                packageJson.version = '$(tagVersion)';
                fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
                console.log('Updated package.json version to ' + packageJson.version);
              "
            displayName: 'Update Version'

          # Build for Windows
          - script: |
              npm run build:win
            displayName: 'Build for Windows'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          # Publish Windows artifacts
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
              artifact: 'windows-builds'
              publishLocation: 'pipeline'
            displayName: 'Publish Windows Build Artifacts'

      - job: BuildMac
        displayName: 'Build for macOS'
        pool:
          vmImage: $(macVmImage)
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'
            displayName: 'Install Node.js'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: ./node_modules
            displayName: Cache npm packages

          - script: |
              npm ci
            displayName: 'Install Dependencies'

          # Update version in package.json
          - script: |
              # Extract version from tag (without 'v')
              echo "Updating version to $(tagVersion)"

              # Use node to update package.json version
              node -e "
                const fs = require('fs');
                const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                packageJson.version = '$(tagVersion)';
                fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
                console.log('Updated package.json version to ' + packageJson.version);
              "
            displayName: 'Update Version'

          # Build for macOS
          - script: |
              npm run build:mac
            displayName: 'Build for macOS'
            env:
              GH_TOKEN: $(GH_TOKEN)
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          # Publish macOS artifacts
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
              artifact: 'mac-builds'
              publishLocation: 'pipeline'
            displayName: 'Publish macOS Build Artifacts'
